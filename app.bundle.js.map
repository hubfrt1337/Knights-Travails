{"version":3,"file":"app.bundle.js","mappings":"MA4DA,SAASA,EAAkBC,GAgBvB,MANwB,CARZ,EADZA,EAASC,KAAKC,MAAMF,IACA,GAAI,EAAGA,EAAO,GAAI,GAC1B,CAACA,EAAO,GAAI,EAAGA,EAAO,GAAI,GAC1B,CAACA,EAAO,GAAI,EAAGA,EAAO,GAAI,GAC1B,CAACA,EAAO,GAAI,EAAGA,EAAO,GAAI,GAC1B,CAACA,EAAO,GAAI,EAAGA,EAAO,GAAI,GAC1B,CAACA,EAAO,GAAI,EAAGA,EAAO,GAAI,GAC1B,CAACA,EAAO,GAAI,EAAGA,EAAO,GAAI,GAC1B,CAACA,EAAO,GAAI,EAAGA,EAAO,GAAI,IAECG,QAAQC,KACxCA,EAAQ,GAAK,GAAKA,EAAQ,GAAK,GAC/BA,EAAQ,GAAK,GAAKA,EAAQ,GAAK,KAEnCC,KAAIC,GAAML,KAAKM,UAAUD,IAEhC,CAEA,MAAME,EAAI,IA/EV,MACI,WAAAC,CAAYC,GACRC,KAAKC,cAAgB,IAAIC,IACzBF,KAAKG,OAASC,MAAMC,KAAK,CAAEC,OAAQP,IAAM,IAAMK,MAAML,GAAMQ,KAAK,IACpE,CACA,SAAAC,CAAUnB,GACFW,KAAKC,cAAcQ,IAAIpB,IACvBW,KAAKC,cAAcS,IAAIrB,EAAQ,GAEvC,CACA,OAAAsB,CAAQtB,EAAQuB,GACZZ,KAAKC,cAAcY,IAAIxB,GAAQyB,KAAKF,GACpCZ,KAAKC,cAAcY,IAAID,GAASE,KAAKzB,EACzC,CACA,eAAA0B,CAAgBC,EAAiBC,EAAWC,GACxC,IAAIC,EAAOD,EACX,MAAME,EAAe,GACrB,KAAe,OAATD,GACFC,EAAaN,KAAKK,GAClBA,EAAOH,EAAgBG,GAE3BE,QAAQC,IAAIF,EAAaG,UAC7B,CACA,WAAAC,CAAYC,EAAOC,GACf,MAAMC,EAAYF,EAAMG,OAAOF,GAC/B,IAAI,IAAIG,KAAUF,EACd,GAAGE,EAAS,GAAKA,EAAS,EACtB,OAAO,EAGf,MAAMC,EAAY,IAAI5B,IACtBuB,EAAQnC,KAAKM,UAAU6B,GACvBC,EAAMpC,KAAKM,UAAU8B,GACrBI,EAAUpB,IAAIe,EAAOrC,EAAkBqC,IACvC,MAAMT,EAAkB,CAAC,EACzBA,EAAgBS,GAAS,KACzB,IAAIM,EAAQ,CAACN,GACb,KAAMM,EAAMzB,OAAS,GAAE,CAEnB,IAAIa,EAAOY,EAAMC,QACjB,GAAGb,IAASO,EAER,OADAL,QAAQC,IAAI,SACLtB,KAAKe,gBAAgBC,EAAiBS,EAAOC,GAExD,IAAIO,EAAUH,EAAUjB,IAAIM,GAE5B,IAAI,MAAMe,KAAOD,EACTjB,EAAgBmB,eAAeD,KAC/BlB,EAAgBkB,GAAOf,EACvBW,EAAUpB,IAAIwB,EAAK9C,EAAkB8C,IACrCH,EAAMjB,KAAKoB,GAKvB,CAEJ,GAsBgB,GACpBrC,EAAE2B,YAAY,CAAC,EAAE,GAAI,CAAC,EAAE,IACxBH,QAAQC,IAAIzB,EAAEM,O","sources":["webpack://template-repository/./src/index.js"],"sourcesContent":["class Graph{\r\n    constructor(size){\r\n        this.adjacencyList = new Map();\r\n        this.matrix = Array.from({ length: size},() => Array(size).fill(0))\r\n    }\r\n    addVertex(vertex){\r\n        if(!this.adjacencyList.has(vertex)){\r\n            this.adjacencyList.set(vertex, [])\r\n        }\r\n    }\r\n    addEdge(vertex, vertex2){\r\n        this.adjacencyList.get(vertex).push(vertex2)\r\n        this.adjacencyList.get(vertex2).push(vertex)\r\n    }\r\n    reconstructPath(visitedVertices, startNode, endNode){\r\n        let curr = endNode;\r\n        const shortestPath = []\r\n        while(curr !== null){\r\n            shortestPath.push(curr)\r\n            curr = visitedVertices[curr];\r\n        }\r\n        console.log(shortestPath.reverse())\r\n    }\r\n    knightMoves(start, end){\r\n        const concatArr = start.concat(end)\r\n        for(let number of concatArr){\r\n            if(number > 7 || number < 0){\r\n                return false;\r\n            }\r\n        }\r\n        const adjacency = new Map();\r\n        start = JSON.stringify(start)\r\n        end = JSON.stringify(end);\r\n        adjacency.set(start, createConnections(start));\r\n        const visitedVertices = {}\r\n        visitedVertices[start] = null\r\n        let queue = [start];\r\n        while(queue.length > 0){\r\n            //console.log(queue)\r\n            let curr = queue.shift();\r\n            if(curr === end){\r\n                console.log(\"found\")\r\n                return this.reconstructPath(visitedVertices, start, end)\r\n            }\r\n            let currAdj = adjacency.get(curr);\r\n            //console.log(\"adjacencies \" + currAdj)\r\n            for(const adj of currAdj){\r\n                if(!visitedVertices.hasOwnProperty(adj)){\r\n                    visitedVertices[adj] = curr;\r\n                    adjacency.set(adj, createConnections(adj))\r\n                    queue.push(adj)\r\n                    //console.log(queue)\r\n                    //console.log(visitedVertices)\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n}\r\n\r\nfunction createConnections(vertex){\r\n    vertex = JSON.parse(vertex);\r\n    let jump1 = [vertex[0] -2, vertex[1] +1];\r\n    let jump2 = [vertex[0] -1, vertex[1] +2];\r\n    let jump3 = [vertex[0] +1, vertex[1] +2];\r\n    let jump4 = [vertex[0] +2, vertex[1] +1];\r\n    let jump5 = [vertex[0] -2, vertex[1] -1];\r\n    let jump6 = [vertex[0] -1, vertex[1] -2];\r\n    let jump7 = [vertex[0] +1, vertex[1] -2];\r\n    let jump8 = [vertex[0] +2, vertex[1] -1];\r\n    const arrayOfVertices = [jump1, jump2, jump3, jump4, jump5, jump6, jump7, jump8]\r\n    let filteredVertices = arrayOfVertices.filter((arrayEl) => {\r\n        if(arrayEl[0] > 7 || arrayEl[0] < 0) return false;\r\n        if(arrayEl[1] > 7 || arrayEl[1] < 0) return false;\r\n        return true;\r\n    }).map(el => JSON.stringify(el))\r\n    return filteredVertices;\r\n}\r\n\r\nconst g = new Graph(8);\r\ng.knightMoves([0,7], [0,0]);\r\nconsole.log(g.matrix)\r\n"],"names":["createConnections","vertex","JSON","parse","filter","arrayEl","map","el","stringify","g","constructor","size","this","adjacencyList","Map","matrix","Array","from","length","fill","addVertex","has","set","addEdge","vertex2","get","push","reconstructPath","visitedVertices","startNode","endNode","curr","shortestPath","console","log","reverse","knightMoves","start","end","concatArr","concat","number","adjacency","queue","shift","currAdj","adj","hasOwnProperty"],"sourceRoot":""}