(()=>{function t(t){return[[(t=JSON.parse(t))[0]-2,t[1]+1],[t[0]-1,t[1]+2],[t[0]+1,t[1]+2],[t[0]+2,t[1]+1],[t[0]-2,t[1]-1],[t[0]-1,t[1]-2],[t[0]+1,t[1]-2],[t[0]+2,t[1]-1]].filter((t=>!(t[0]>7||t[0]<0||t[1]>7||t[1]<0))).map((t=>JSON.stringify(t)))}const s=new class{constructor(t){this.adjacencyList=new Map,this.matrix=Array.from({length:t},(()=>Array(t).fill(0)))}addVertex(t){this.adjacencyList.has(t)||this.adjacencyList.set(t,[])}addEdge(t,s){this.adjacencyList.get(t).push(s),this.adjacencyList.get(s).push(t)}reconstructPath(t,s,e){let n=e;const r=[];for(;null!==n;)r.push(n),n=t[n];console.log(r.reverse())}knightMoves(s,e){const n=s.concat(e);for(let t of n)if(t>7||t<0)return!1;const r=new Map;s=JSON.stringify(s),e=JSON.stringify(e),r.set(s,t(s));const o={};o[s]=null;let c=[s];for(;c.length>0;){let n=c.shift();if(n===e)return console.log("found"),this.reconstructPath(o,s,e);let i=r.get(n);for(const s of i)o.hasOwnProperty(s)||(o[s]=n,r.set(s,t(s)),c.push(s))}}}(8);s.knightMoves([0,7],[0,0]),console.log(s.matrix)})();
//# sourceMappingURL=app.bundle.js.map